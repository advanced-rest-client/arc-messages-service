/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   arc-messages-service-worker.js
 */

/**
 * Class that implements a worker process negotiates connections from clients
 * in other threads, and operates on an IndexedDB database object store.
 */
declare class ArcMessagesServiceWorker {

  /**
   * Opens the datastore.
   *
   * @returns Promise resolved when the datastore is opened.
   */
  openDb(): Promise<any>|null;

  /**
   * Closes active connection to the datastore.
   */
  closeDb(): Promise<any>|null;

  /**
   * Perform a transaction on an IndexedDB object store.
   *
   * @param operation The name of the method to call on the object
   * store instance.
   * @param storeName The name of the object store to operate on.
   * @param mode The mode of the transaction that will be performed.
   * @param operationArgs The arguments to call the method named by
   * the operation parameter.
   * @returns A promise that resolves when the transaction completes,
   * with the result of the transaction, or rejects if the transaction fails
   * with the error reported by the transaction.
   */
  operateOnStore(operation: string, storeName: string, mode: string, ...operationArgs: any[]): Promise<any>|null;

  /**
   * Lists keys in the datastore.
   *
   * @param type Type name
   */
  keysFor(type: String|null): Promise<any>|null;

  /**
   * Lists keys in the data store.
   *
   * @param storeName Name of the data store.
   */
  listKeys(storeName: String|null): Promise<any>|null;

  /**
   * List data for a type.
   */
  dataFor(type: String|null): Promise<any>|null;

  /**
   * Lists data for given type and index.
   *
   * @param type Entity type
   * @param index Index name
   * @param value Index value
   */
  dataForIndex(type: String|null, index: String|null, value: String|null): Promise<any>|null;

  /**
   * Lists data for given type and index.
   *
   * @param storeName Store name
   * @param index Index name
   * @param value Index value
   */
  listObjects(storeName: String|null, index: String|null, value: String|null): Promise<any>|null;

  /**
   * Perform a "get" operation on an IndexedDB object store.
   *
   * @param storeName The name of the object store to operate on.
   * @param key The key in the object store that corresponds to the
   * value that should be got.
   * @returns A promise that resolves with the outcome of the
   * operation.
   */
  get(storeName: string, key: string): Promise<any>|null;

  /**
   * Perform a "put" operation on an IndexedDB object store.
   *
   * @param storeName The name of the object store to operate on.
   * @param key The key in the object store that corresponds to the
   * value that should be put.
   * @param value The value to be put in the object store
   * at the given key.
   * @returns A promise that resolves with the outcome of the
   * operation.
   */
  set(storeName: string, key: string, value: any): Promise<any>|null;

  /**
   * Perform a "clear" operation on an IndexedDB object store.
   *
   * @param storeName The name of the object store to operate on.
   * @returns A promise that resolves with the outcome of the
   * operation.
   */
  clear(storeName: string): Promise<any>|null;

  /**
   * Performs a transaction (in the parlance of the the client).
   *
   * @param method The method of the transaction. Supported methods
   * are `"get"` and `"set"`.
   * @param type Data type. Can be either `meta` or `data`.
   * @param key The key to get or set.
   * @param value The value to set, when the method is `"set"`.
   * @returns A promise that resolves with the outcome of the
   * transaction, or rejects if an unsupported method is attempted.
   */
  transaction(method: string, type: String|null, key: string, value: object|null): Promise<any>|null;

  /**
   * Adds many records to the data store in single transaction.
   *
   * @param storeName Data store name
   * @param values List of objects to put into the store
   * @returns Promise resolved when operation is completed.
   */
  bulkSet(storeName: String|null, values: Array<object|null>|null): Promise<any>|null;

  /**
   * Returns a store name for given data type.
   *
   * @param type Data type. Can be either `meta` or `data`.
   * @returns Store name for data type.
   */
  storeName(type: String|null): String|null|undefined;

  /**
   * Registers a client, represented by a MessagePort. The port is
   * presumed to be a direct, unshared channel to the client being registerd.
   *
   * @param port The port that represents the client being
   * registered.
   */
  registerClient(port: MessagePort|null): void;

  /**
   * Triages messages received from a specific client, dispatches their
   * data to the appropriate methods and responds to the client if applicable.
   *
   * @param event The event that contains the message sent by
   * the client.
   * @param port The port the represents the client the sent the
   * message.
   */
  handleClientMessage(event: MessageEvent|null, port: MessagePort|null): void;
}
