/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   arc-messages-service.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../iron-ajax/iron-ajax.d.ts" />
/// <reference path="arc-messages-service-client.d.ts" />

/**
 * Messages synchronization service for ARC
 *
 * It gets the list of messages from ARC data store server and saves the list
 * of newly created messages in local indexed db. Leter calls to the service
 * will request for list of messages since last sync time.
 *
 * ### Example
 *
 * ```html
 * <arc-messages-service platform="electron"></arc-messages-service>
 * <script>
 * var service = document.querySelector('arc-messages-service');
 * service.addEventListener('unread-changed', function(e) {
 *   console.log('Unread messages list changed', e.detail.value);
 *   service.readMessages(); // Can be replaced with `auto-messages` property
 * });
 *
 * service.addEventListener('messages-changed', function(e) {
 *   console.log('All messages list changed', e.detail.value);
 * });
 * </script>
 * ```
 */
declare class ArcMessagesService extends Polymer.Element {

  /**
   * Name of the platform to serve data from
   */
  platform: string|null|undefined;

  /**
   * Messages endpoint URI
   */
  endpointUri: string|null|undefined;

  /**
   * List of messages
   */
  messages: any[]|null|undefined;

  /**
   * List of unread messages
   */
  unread: any[]|null|undefined;

  /**
   * Timestamp of last check opeartion
   */
  lastChecked: number|null|undefined;

  /**
   * List of query parameters to use with the request
   */
  _queryParams: object|null|undefined;

  /**
   * Full URL to the messages endpoint with parameters.
   */
  readonly _serviceUrl: string|null|undefined;

  /**
   * A URL that points to the script to load for the corresponding
   * Worker instance that will be used for minimally-blocking operations
   * on IndexedDB.
   *
   * By default, this will be the path to
   * `app-indexeddb-mirror-worker.js` as resolved by
   * `Polymer.Base.resolveUrl` for the current element being created.
   */
  workerUrl: string|null|undefined;

  /**
   * An instance of `ArcMessagesServiceClient`, which is
   * responsible for negotiating transactions with the corresponding
   * Worker spawned from `workerUrl`.
   */
  readonly client: object|null|undefined;

  /**
   * Response ferom the ARC messages endpoint.
   */
  messagesResponse: object|null|undefined;

  /**
   * If set it will read list of all mesages from the datastore
   */
  autoMessages: boolean|null|undefined;
  ready(): void;

  /**
   * Computes `_queryParams` based on the value and stores assigned value
   * to the datastore.
   *
   * @param lastChecked Timestamp of last check time.
   */
  _lastCheckedChanged(lastChecked: Number|null): void;

  /**
   * Checkes when the DB was synchronized and sets `lastChecked` property
   * that triggest `iron-ajax` to request a data.
   */
  _whenChecked(): void;

  /**
   * Computes service URL depending on platform and url parameters
   *
   * @returns Full URL to the messages service endpoint.
   */
  _computeServiceUrl(endpointUri: any, platform: any, params: any): String|null;

  /**
   * Stores the information when last time checked for a messages.
   */
  _storeChecked(when: any): any;

  /**
   * This is called only when the response is ready, not when any of the
   *
   * @returns [description]
   */
  _messagesResponseReady(response: any): any;

  /**
   * Synchronizes incomming messages with the datastore.
   *
   * @param incommingMessages Response from ARC server.
   */
  sync(incommingMessages: object|null): Promise<any>|null;
  _sync(incommingMessages: any, existingKeys: any): any;

  /**
   * Updates list of unread messages.
   */
  updateUnread(): any;

  /**
   * Reads list of all messages from the data store.
   * It sets the `messages` property when ready.
   */
  readMessages(): any;

  /**
   * Sort function for the messages.
   */
  _messagesSort(a: any, b: any): any;

  /**
   * Updates a status of a message in the data store when a message
   * part changes. This only works when a single message in the array has been
   * updated (either `unread` or `messages`).
   */
  _updateState(record: any): any;

  /**
   * Updates `unread` array depending on update state.
   *
   * @param dataType Either `unread` or `messages`.
   * @param item Updated item object
   */
  _postUpdateMessage(dataType: String|null, item: object|null): void;

  /**
   * Closes datastore connection in shared worker.
   */
  closeDb(): Promise<any>|null;
}

interface HTMLElementTagNameMap {
  "arc-messages-service": ArcMessagesService;
}
